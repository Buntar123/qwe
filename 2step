import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.inspection import permutation_importance
from sklearn.model_selection import train_test_split

def load_and_prepare_data(mal_path: str, leg_path: str) -> tuple[np.ndarray, np.ndarray]:
    """Загружает данные и объединяет в один датасет с метками"""
    mal = np.loadtxt(mal_path, usecols=range(1, 11))  # K1-K10
    leg = np.loadtxt(leg_path, usecols=range(1, 11))
    X = np.vstack((mal, leg))
    y = np.array([1] * len(mal) + [0] * len(leg))  # 1=mal, 0=leg
    return X, y

def compute_permutation_importance(X: np.ndarray, y: np.ndarray, n_repeats: int = 30) -> pd.DataFrame:
    """Вычисляет важность признаков через перестановки"""
    # Разделение на train/test для надежности
    X_train, _, y_train, _ = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Модель (настроена под малые данные)
    model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42)
    model.fit(X_train, y_train)
    
    # Permutation Importance
    result = permutation_importance(
        model, X_train, y_train,
        n_repeats=n_repeats,
        random_state=42,
        scoring='accuracy'
    )
    
    # Сбор результатов
    return pd.DataFrame({
        'Feature': [f'K{i+1}' for i in range(X.shape[1])],
        'Importance': result.importances_mean,
        'Std': result.importances_std,
    }).sort_values('Importance', ascending=False)

if __name__ == '__main__':
    try:
        X, y = load_and_prepare_data('mal_output.txt', 'leg_output.txt')
        importance_df = compute_permutation_importance(X, y)
        print(importance_df.to_markdown(index=False, floatfmt=".3f"))
    except Exception as e:
        print(f"Ошибка: {e}")
