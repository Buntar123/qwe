import numpy as np
import pandas as pd
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.feature_selection import RFE, f_classif
from statsmodels.stats.multitest import multipletests
import sys

def load_data_safe(malicious_file, legitimate_file):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    def load_file(filename):
        try:
            data = []
            with open(filename, 'r') as f:
                for i, line in enumerate(f, 1):
                    parts = line.strip().split()
                    if len(parts) < 11:
                        print(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {i}: –ü—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
                        continue
                    try:
                        coeffs = list(map(float, parts[1:11]))
                        data.append(coeffs)
                    except ValueError:
                        print(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {i}: –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return np.array(data)
        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {str(e)}")
            return None
    
    print("\n" + "="*50)
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    X_mal = load_file(malicious_file)
    X_leg = load_file(legitimate_file)
    
    if X_mal is None or X_leg is None:
        return None, None
    
    if len(X_mal) == 0 or len(X_leg) == 0:
        print("‚ùå –û–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç!")
        return None, None
    
    X = np.vstack([X_mal, X_leg])
    y = np.array([1]*len(X_mal) + [0]*len(X_leg))
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(X)} –æ–±—Ä–∞–∑—Ü–æ–≤")
    return X, y

def analyze_features(X, y):
    """–ê–Ω–∞–ª–∏–∑ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"""
    results = []
    constant_features = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ—Å—Ç—å
    for i in range(X.shape[1]):
        if np.all(X[:, i] == X[0, i]):
            constant_features.append(i+1)
    
    try:
        # ANOVA —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        with np.errstate(divide='ignore', invalid='ignore'):
            f_values, p_values = f_classif(X, y)
        
        # –ü–æ–ø—Ä–∞–≤–∫–∞ –ë–µ–Ω–¥–∂–∞–º–∏–Ω–∏-–•–æ—Ö–±–µ—Ä–≥–∞
        if len(p_values) > 0:
            _, corrected_p, _, _ = multipletests(p_values, method='fdr_bh')
        else:
            corrected_p = np.array([])
        
        # RFE-LDA
        lda = LinearDiscriminantAnalysis()
        rfe = RFE(estimator=lda, n_features_to_select=3, step=1)
        
        try:
            rfe.fit(X, y)
            ranking = rfe.ranking_
            support = rfe.support_
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ RFE: {str(e)}")
            ranking = np.zeros(X.shape[1])
            support = np.zeros(X.shape[1], dtype=bool)
        
        # –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for i in range(X.shape[1]):
            res = {
                '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': i+1,
                '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞': (i+1) in constant_features,
                'F-–∑–Ω–∞—á–µ–Ω–∏–µ': f_values[i] if i < len(f_values) else np.nan,
                'p-–∑–Ω–∞—á–µ–Ω–∏–µ': p_values[i] if i < len(p_values) else np.nan,
                'p-–∑–Ω–∞—á–µ–Ω–∏–µ (—Å–∫–æ—Ä—Ä–µ–∫—Ç.)': corrected_p[i] if i < len(corrected_p) else np.nan,
                '–†–∞–Ω–≥ (RFE)': ranking[i],
                '–û—Ç–æ–±—Ä–∞—Ç—å (RFE)': support[i]
            }
            results.append(res)
            
    except Exception as e:
        print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return None, None
    
    df = pd.DataFrame(results)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    conditions = [
        (df['–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞']),
        (df['p-–∑–Ω–∞—á–µ–Ω–∏–µ (—Å–∫–æ—Ä—Ä–µ–∫—Ç.)'] < 0.05) & (df['–û—Ç–æ–±—Ä–∞—Ç—å (RFE)']),
        (df['p-–∑–Ω–∞—á–µ–Ω–∏–µ (—Å–∫–æ—Ä—Ä–µ–∫—Ç.)'] < 0.05) | (df['–û—Ç–æ–±—Ä–∞—Ç—å (RFE)'])
    ]
    choices = ['–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞', '–û—Å—Ç–∞–≤–∏—Ç—å', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å']
    df['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'] = np.select(conditions, choices, default='–ò—Å–∫–ª—é—á–∏—Ç—å')
    
    return df, constant_features

def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    X, y = load_data_safe('malicious.txt', 'legitimate.txt')
    if X is None:
        sys.exit(1)
    
    # –ê–Ω–∞–ª–∏–∑
    df, constant_features = analyze_features(X, y)
    if df is None:
        sys.exit(1)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_file = 'RFELDA_results.csv'
    df.to_csv(output_file, index=False)
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    
    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    print("\n" + "="*50)
    print("–ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print(df[['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è']].sort_values('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'))
    
    if constant_features:
        print(f"\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã {constant_features}")

if __name__ == "__main__":
    main()
